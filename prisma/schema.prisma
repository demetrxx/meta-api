generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User

enum Role {
  USER
  ADMIN
}

model Profile {
  id Int @id @default(autoincrement())

  firstName String?
  lastName  String?

  avatar String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique @db.VarChar(320)
  phone   String?
  profile Profile?

  roles         Role[] @default([USER])
  accountStatus String @default("active")

  registrationDate DateTime  @default(now())
  lastVisitDate    DateTime? @default(now())

  oauthProvider  String?
  googleId       String?          @unique
  HistoryProfile HistoryProfile[]
}

// --- History ---

// Practice

enum HistoryQuestionType {
  SINGLE
  ORDER
  MATCH
  SELECT
}

model HistoryQuestion {
  id      Int                 @id @default(autoincrement())
  name    String
  desc    String?
  type    HistoryQuestionType
  img     String?
  options Json
  answer  Json

  topicId      Int
  topic        HistoryTopic     @relation(fields: [topicId], references: [id])
  keyWords     HistoryKeyWord[]
  solution     String?
  whereToLearn String[]
  advice       String?

  profilesSeen     HistoryProfile[] @relation("profilesSeen")
  profilesAnswered HistoryProfile[] @relation("profilesAnswered")
  profilesFailed   HistoryProfile[] @relation("profilesFailed")
  tickets          HistoryTicket[]
}

model HistoryTopic {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  order Int    @unique

  historyQuestion HistoryQuestion[]
  historyKeyWord  HistoryKeyWord[]
  HistoryProgress HistoryProgress[]
}

model HistoryKeyWord {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(100)
  topicId         Int               @unique
  topic           HistoryTopic      @relation(fields: [topicId], references: [id])
  historyQuestion HistoryQuestion[]
}

model HistoryTicket {
  id                 Int                  @id @default(autoincrement())
  questions          HistoryQuestion[]
  HistoryRealSession HistoryRealSession[]
}

// Progress

model HistoryProfile {
  id Int @id @default(autoincrement())

  answeredIds Int[]
  seen        HistoryQuestion[] @relation("profilesSeen")
  answered    HistoryQuestion[] @relation("profilesAnswered")
  failed      HistoryQuestion[] @relation("profilesFailed")

  progressTotal Int
  timeAvarage   Int

  userId Int
  user   User @relation(fields: [userId], references: [id])

  HistoryProgress    HistoryProgress[]
  HistoryRealSession HistoryRealSession[]
}

model HistoryProgress {
  id    Int @id @default(autoincrement())
  value Int

  topicId      Int
  historyTopic HistoryTopic @relation(fields: [topicId], references: [id])

  profileId      Int
  historyProfile HistoryProfile @relation(fields: [profileId], references: [id])
}

model HistoryRealSession {
  id      Int     @id @default(autoincrement())
  done    Boolean @default(false)
  time    Int
  score   Int?
  answers Json

  ticketId Int
  ticket   HistoryTicket @relation(references: [id], fields: [ticketId])

  profileId Int
  profile   HistoryProfile @relation(references: [id], fields: [profileId])
}
